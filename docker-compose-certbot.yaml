# docker-compose.yml
#
# Usage:
#   export PORT=
#   export CLOUD_RUN_SERVICE_NAME=
#   export DATABASE_CLIENT=mongo
#   export DATABASE_HOST=mongo
#   export DATABASE_PORT=27017
#   export DATABASE_NAME=strapi
#   export DATABASE_USERNAME=strapi
#   export DATABASE_PASSWORD=strapi
#   export MONGO_INITDB_DATABASE=strapi
#   export MONGO_INITDB_ROOT_USERNAME=strapi
#   export MONGO_INITDB_ROOT_PASSWORD=strapi
# What can you do with this?
# Create and start all configured services with docker-compose up.
# Build your container images for local use with docker-compose build.

version: '3.7'

services:
  # Backend
  backend:
    build:
        context: ./backend
        dockerfile: Dockerfile
    image: backend:local
    container_name: strapi-backend
    #restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT} 
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      - strapi_network
    volumes:
      - ./backend:/usr/src/app #It's in the Filesystem Hierarchy Standard (FHS).
    ports:
      - '1337:1337'
    depends_on:
      - mongo

  # Frontend
  frontend:
    build:
        context: ./frontend
        dockerfile: Dockerfile
    image: frontend:local
    container_name: strapi-frontend
    environment:
      - API_BASEURL=http://localhost:1337
    networks:
      - strapi_network
    volumes:
      - ./frontend:/usr/src/app
    ports:
      - '3100:3000'
    depends_on:
      - backend

  # Database
  mongo:
    image: mongo
    container_name: strapi-mongo
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - strapi_network
    volumes:
        - ./db:/data/db
        #- strapi-data:/data/db
    ports:
      - '27017:27017'
    restart: unless-stopped

  # Mongo DB Client
  mongoclient:
    image: mongoclient/mongoclient
    container_name: strapi-mongoclient
    environment:
      - MONGOCLIENT_DEFAULT_CONNECTION_URL=mongodb://localhost:27017/strapi
    ports:
      - '3300:3000'
    networks:
      - strapi_network
    depends_on:
      - mongo
  
  # Coder
  code-server:
    image: codercom/code-server
    ports: 
    - '8081:8080' # Should be removed once you setup nginx. It is for testing the compose file only.
    volumes:
    - ./code-server/.config:/home/coder/.config
    - ./code-server/.local:/home/coder/.local
    - ${PWD}:/home/coder/project
    user: ${CURRENT_UID} # Please run as follows CURRENT_UID=$(id -u):$(id -g) docker-compose up
    command: ['--auth', 'none']
    networks:
      - strapi_network

  nginx:
    container_name: nginx
    image: nginx:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - strapi_network
    volumes:
      - ./webserver/certbot/default.conf:/etc/nginx/conf.d/default.conf
      - ./webserver/certbot/selo.dev.conf:/etc/nginx/sites-enabled/selo.dev.conf
      - /etc/letsencrypt:/etc/letsencrypt
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    #entrypoint: /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'" # ðŸ’¡
    user: ${CURRENT_UID}
    depends_on:
      - mkcert
  certbot:
    container_name: certbot
    image: certbot/certbot
    networks:
      - strapi_network
    volumes:
      - ./webserver/certbot/conf:/etc/letsencrypt
      - ./webserver/certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;" # ðŸ’¡
    #command: certonly --webroot --webroot-path=/var/www/certbot --email selo@pwa.marketing --agree-tos --no-eff-email -d dev.pwa.marketing
    depends_on:
      - nginx
networks:
  strapi_network:
    name: strapi_network

volumes:
  strapi-data: